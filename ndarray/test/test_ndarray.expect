> create float32 [2, 2] [[1.0, 2.0], [3.0, 4.0]]
[[1, 2],
 [3, 4]]

> create int32 [3] [1, 2, 3]
[1, 2, 3]

> create float32 [0] []
[]

> create float32 [2, 2, 2] [[[0.0, 1.0], [2.0, 3.0]], [[4.0, 5.0], [6.0, 7.0]]]
[[[0, 1],
  [2, 3]],
 [[4, 5],
  [6, 7]]]

> scalar float32 42.0
42

> scalar int64 100L
100

> to_bigarray float32 [2, 2]
Converted Bigarray:
1.000000 2.000000
3.000000 4.000000
Original modified, Bigarray view:
1.000000 2.000000
3.000000 4.000000

> copy [1.0, 2.0, 3.0]
Original after modification: [10, 2, 3]
Copy (should be unchanged): [1, 2, 3]

> empty float32 [2, 2]
[[0, 0],
 [0, 0]]

> fill 7.0 (empty float32 [2, 2])
[[7, 7],
 [7, 7]]

> blit [1., 2.] to [0., 0.]
Destination before blit: [0, 0]
Destination after blit: [1, 2]

> blit [1., 2.] to [0., 0., 0.]
blit: tensors must have the same shape

> full float32 [2, 3] 5.5
[[5.5, 5.5, 5.5],
 [5.5, 5.5, 5.5]]

> full_like 10l [[1l, 2l], [3l, 4l]]
[[10, 10],
 [10, 10]]

> empty_like [[1., 2.], [3., 4.]]
[[0, 0],
 [0, 0]]

> zeros float32 [2, 2]
[[0, 0],
 [0, 0]]

> zeros_like [[1.0, 2.0], [3.0, 4.0]]
[[0, 0],
 [0, 0]]

> ones float32 [2, 2]
[[1, 1],
 [1, 1]]

> ones_like [[1l, 2l], [3l, 4l]]
[[1, 1],
 [1, 1]]

> identity float32 3
[[1, 0, 0],
 [0, 1, 0],
 [0, 0, 1]]

> identity int32 1
[[1]]

> eye float32 2
[[1, 0],
 [0, 1]]

> eye ~m:3 float32 4
[[1, 0, 0, 0],
 [0, 1, 0, 0],
 [0, 0, 1, 0]]

> eye ~m:4 ~k:1 float32 3
[[0, 1, 0],
 [0, 0, 1],
 [0, 0, 0],
 [0, 0, 0]]

> eye ~k:(-1) int32 3
[[0, 0, 0],
 [1, 0, 0],
 [0, 1, 0]]

> arange int32 0 10 2
[0, 2, 4, 6, 8]

> arange_f float32 0.0 5.0 0.5
[0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5]

> linspace float32 2.0 3.0 5
[2, 2.25, 2.5, 2.75, 3]

> linspace ~endpoint:false int32 0.0 4.0 5
[0, 0, 1, 2, 3]

> logspace float32 ~base:10.0 2.0 3.0 4
[100, 215.443, 464.159, 1000]

> logspace ~endpoint:false ~base:2.0 float64 0.0 4.0 5
[1, 1.7411, 3.03143, 5.27803, 9.18959]

> logspace float32 1.0 3.0 3
[10, 100, 1000]

> geomspace float32 2.0 32.0 5
[2, 4, 8, 16, 32]

> geomspace ~endpoint:false float64 1.0 256.0 9
[1, 1.85175, 3.42898, 6.3496, 11.7579, 21.7726, 40.3175, 74.6579, 138.248]

> shape [2, 3]
[2, 3]

> strides float32 [2, 3]
[3, 1]

> stride 0 float32 [2, 3]
3

> stride 1 float32 [2, 3]
1

> strides int64 [2, 3]
[3, 1]

> dtype float32 [2, 2]
Float32

> dtype complex64 [3]
Complex64

> itemsize float32 [2, 2]
4

> itemsize int64 [2, 2]
8

> ndim []
0

> ndim [2, 2]
2

> dim 0 [2, 3]
2

> dim 2 [2, 3]
axis out of bounds

> dims [2, 3]
[2, 3]

> nbytes float32 [2, 2]
16

> nbytes int64 [2, 3]
48

> size [2, 3]
6

> size []
1

> offset basic [2, 2]
0

> offset slice [1:, 1:] of [3, 3]
Original:
[[0, 1, 2],
 [3, 4, 5],
 [6, 7, 8]]
Slice:
[]
Offset of slice: 5

> data view check
Original: [1, 2, 3]
After modifying data buffer view: [99, 2, 3]

> get_item [[1.0, 2.0], [3.0, 4.0]] [0, 1]
2.000000

> get_item [[1.0, 2.0], [3.0, 4.0]] [0, 1]
2.000000

> set_item [[1.0, 2.0], [3.0, 4.0]] [1, 0] 5.0
[[1, 2],
 [5, 4]]

> get_item [[1.0, 2.0], [3.0, 4.0]] [2, 0]
get_item: Index 2 at dimension 0 is out of bounds for shape [2; 2]

> set_item [[1.0, 2.0], [3.0, 4.0]] [0, 2] 5.0
set_item: Index 2 at dimension 1 is out of bounds for shape [2; 2]

> get [0] from [[1,2],[3,4]]
[1, 2]

> get [1, 1] from [[1,2],[3,4]]
4

> set [0] of [[1,2],[3,4]] to [8,9]
Original:
[[1, 2],
 [3, 4]]
After set [0]:
[[8, 9],
 [3, 4]]

> set [1, 0] of [[1,2],[3,4]] to 99
Original:
[[1, 2],
 [3, 4]]
After set [1, 0]:
[[1, 2],
 [99, 4]]

> flatten [[1.0, 2.0], [3.0, 4.0]]
[1, 2, 3, 4]

> ravel [[1.,2.],[3.,4.]]
Raveled:
[1, 2, 3, 4]
Original modified:
[[99, 2],
 [3, 4]]
Raveled view (should reflect change):
[99, 2, 3, 4]

> ravel (transpose [[1.,2.],[3.,4.]])
Original Transposed:
[[1, 3],
 [2, 4]]
Raveled:
[1, 3, 2, 4]
Original modified, Transposed view updated:
[[99, 3],
 [2, 4]]
Raveled copy (should NOT reflect change):
[1, 3, 2, 4]

> reshape [1.0, 2.0, 3.0, 4.0] [2, 2]
[[1, 2],
 [3, 4]]

> reshape [4] to [2, 2] (view?)
Reshaped:
[[1, 2],
 [3, 4]]
Original modified:
[99, 2, 3, 4]
Reshaped view (should reflect change if view):
[[99, 2],
 [3, 4]]

> reshape [1.0, 2.0, 3.0, 4.0] [4, 1]
[[1],
 [2],
 [3],
 [4]]

> reshape [1.0, 2.0, 3.0] [2, 2]
reshape: cannot reshape array of size 3 into shape [2; 2]

> squeeze [1, 2, 1, 3]
[[0, 1, 2],
 [3, 4, 5]]

> squeeze ~axes:[0, 2] [1, 2, 1, 3]
[[0, 1, 2],
 [3, 4, 5]]

> squeeze [1, 1, 1]
42

> squeeze [2, 2]
[[1, 2],
 [3, 4]]

> slice [1, 3] [0, 4] from 3x4
Original:
[[0, 1, 2, 3],
 [4, 5, 6, 7],
 [8, 9, 10, 11]]
Slice view (should reflect change):
[[4, 5, 6, 7],
 [8, 9, 10, 11]]

> slice ~steps:[2, 2] [0, 3] [0, 4] from 3x4
Original:
[[0, 1, 2, 3],
 [4, 5, 6, 7],
 [8, 9, 10, 11]]
Slice view (should reflect change):
[[0, 2],
 [8, 10]]

> slice [1:2, :] from 3x2 (view?)
Original:
[[1, 2],
 [3, 4],
 [5, 6]]
Slice:
[[3, 4]]
Original modified:
[[1, 2],
 [99, 4],
 [5, 6]]
Slice view (should reflect change):
[[99, 4]]

> expand_dims 0 [1.0, 2.0, 3.0]
[[1, 2, 3]]

> expand_dims 1 [1.0, 2.0, 3.0]
[[1],
 [2],
 [3]]

> expand_dims 0 then 2 for [1.0, 2.0, 3.0]
[[[1],
  [2],
  [3]]]

> expand_dims 2 [1.0, 2.0, 3.0]
expand_dims: axis 2 out of bounds for shape [3]

> broadcast_to [1.0, 2.0, 3.0] [3, 3]
[[1, 2, 3],
 [1, 2, 3],
 [1, 2, 3]]

> broadcast_to [[1.], [2.]] [2, 3]
[[1, 1, 1],
 [2, 2, 2]]

> broadcast_to 5.0 [2, 2]
[[5, 5],
 [5, 5]]

> broadcast_to [1.0, 2.0] [3, 3]
Shapes [2] and [3; 3] are not compatible for broadcasting at dimension 1 (original size 2 vs target size 3)

> broadcast_to [1.,2.,3.] [2,2]
Shapes [3] and [2; 2] are not compatible for broadcasting at dimension 1 (original size 3 vs target size 2)

> to_array [1, 2, 3]
[1;2;3]

> astype int32 [1.1, 2.9, -3.3]
[1, 2, -3]

> astype float64 [1l, 2l, 3l]
[1, 2, 3]

> astype complex32 [1.0, 2.0]
[(1+0i), (2+0i)]

> astype float64 [{1.,2.}, {3.,4.}]
[1, 3]

> add [[1.0, 2.0], [3.0, 4.0]] [[5.0, 6.0], [7.0, 8.0]]
[[6, 8],
 [10, 12]]

> add_inplace t1 [[5.0, 6.0], [7.0, 8.0]] where t1=[[1..4]]
t1 before:
[[1, 2],
 [3, 4]]
t1 after:
[[6, 8],
 [10, 12]]
Returned tensor (should be t1):
[[6, 8],
 [10, 12]]

> mul [[1.0, 2.0], [3.0, 4.0]] [[5.0, 6.0], [7.0, 8.0]]
[[5, 12],
 [21, 32]]

> mul_inplace t1 [5, 6, 7] where t1=[1, 2, 3]
t1 before:
[1, 2, 3]
t1 after:
[5, 12, 21]

> sub [[5.0, 6.0], [7.0, 8.0]] [[1.0, 2.0], [3.0, 4.0]]
[[4, 4],
 [4, 4]]

> sub_inplace t1 [1., 2.] where t1=[[10., 11.], [12., 13.]]
t1 before:
[[10, 11],
 [12, 13]]
t1 after:
[[9, 9],
 [11, 11]]

> div [[5.0, 6.0], [7.0, 8.0]] [[1.0, 2.0], [4.0, 5.0]]
[[5, 3],
 [1.75, 1.6]]

> div_inplace t1 2.0 where t1=[10., 20., 30.]
t1 before:
[10, 20, 30]
t1 after:
[5, 10, 15]

> remainder [10, 11, 12] [3, 5, 4]
[1, 1, 0]

> pow [2., 3., 4.] [3., 2., 0.5]
[8, 9, 2]

> add [[1, 2], [3, 4]] [[5, 6], [7, 8]]
[[6, 8],
 [10, 12]]

> div [[10, 21], [30, 40]] [[3, 5], [4, 4]]
[[3, 4],
 [7, 10]]

> exp [0.0, 1.0, 2.0]
[1, 2.71828, 7.38906]

> log [1.0, 2.718, 7.389]
[0, 0.999999, 2]

> log [1.0, 0.0, -1.0]
Completed without error.

> abs [-1, 0, 5, -10]
[1, 0, 5, 10]

> abs [-1.5, 0.0, 5.2]
[1.5, 0, 5.2]

> neg [1.0, -2.0, 0.0]
[-1, 2, -0]

> sign [-5.0, 0.0, 3.2, -0.0]
[-1, 0, 1, 0]

> sign [-5l, 0l, 3l]
[-1, 0, 1]

> sqrt [4.0, 9.0, 16.0]
[2, 3, 4]

> sqrt [4.0, -9.0, 16.0]
Completed without error.

> maximum [1.0, 3.0, 2.0] [2.0, 1.0, 4.0]
[2, 3, 4]

> minimum [1, 3, 4] [2, 1, 4]
[1, 1, 4]

> equal [1., 2., 3.] [1., 5., 3.]
[1, 0, 1]

> greater [1.0, 3.0, 2.0] [2.0, 1.0, 4.0]
[0, 1, 0]

> greater_equal [1, 3, 4] [2, 3, 3]
[0, 1, 1]

> less [1.0, 3.0, 2.0] [2.0, 1.0, 4.0]
[1, 0, 1]

> less_equal [1, 3, 4] [2, 3, 3]
[1, 1, 0]

> square [1., 2., -3., 0.]
[1, 4, 9, 0]

> sin [0, pi/6, pi/4, pi/2]
[0, 0.5, 0.707107, 1]

> cos [0, pi/6, pi/4, pi/2]
[1, 0.866025, 0.707107, -4.37114e-08]

> tan [0, pi/6, pi/4, pi/2]
[0, 0.57735, 1, -2.28773e+07]

> asin [0, 0.5, 1.0]
[0, 0.523599, 1.5708]

> acos [1.0, 0.5, 0.0]
[0, 1.0472, 1.5708]

> atan [0, 1.0, -1.0]
[0, 0.785398, -0.785398]

> sinh [-1, 0, 1]
[-1.1752, 0, 1.1752]

> cosh [-1, 0, 1]
[1.54308, 1, 1.54308]

> tanh [-1, 0, 1]
[-0.761594, 0, 0.761594]

> asinh [-1, 0, 2]
[-0.881374, 0, 1.44364]

> acosh [1, 2, 3]
[0, 1.31696, 1.76275]

> atanh [-0.5, 0, 0.5]
[-0.549306, 0, 0.549306]

> add [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]] [10., 20., 30.]
[[11, 22, 33],
 [14, 25, 36]]

> add [[1.], [2.]] [[10., 11., 12.], [20., 21., 22.]]
[[11, 12, 13],
 [22, 23, 24]]

> mul (shape 4,1) (shape 3,)
t1 (4,1):
[[1],
 [2],
 [3],
 [4]]
t2 (3,):
[10, 100, 1000]
[[10, 100, 1000],
 [20, 200, 2000],
 [30, 300, 3000],
 [40, 400, 4000]]

> add 2.0 [1.0, 2.0, 3.0]
[3, 4, 5]

> sum [[1.0, 2.0], [3.0, 4.0]]
10

> sum ~axes:[0] [[1..3],[4..6]]
[0, 0, 0]

> sum ~axes:[1] ~keepdims:true [[1..3],[4..6]]
[[0],
 [0]]

> prod [1, 2, 3, 4]
24

> prod ~axes:[1] [[1,2,3],[4,5,6]]
[0, 0]

> mean [[1.0, 2.0], [3.0, 4.0]]
2.5

> mean ~axes:[0] ~keepdims:true [[1..3],[4..6]]
[[0, 0, 0]]

> max [[1.0, 2.0], [3.0, 4.0]]
4

> max ~axes:[1] [[1,5,3],[4,2,6]]
[0, 0]

> min [[1.0, 2.0], [3.0, 4.0]]
1

> min ~axes:[0] ~keepdims:true [[1,5,3],[4,2,6]]
[[0, 0, 0]]

> var [1., 2., 3., 4., 5.]
2

> var ~axes:[1] [[1,2,3],[4,5,6]]
[0, 0]

> std [1., 2., 3., 4., 5.]
1.41421

> std ~axes:[0] ~keepdims:true [[1,2,3],[4,5,6]]
[[0, 0, 0]]

> dot [1, 2, 3] [4, 5, 6]
32

> dot [[1.0, 2.0], [3.0, 4.0]] [[5.0, 6.0], [7.0, 8.0]]
[[19, 22],
 [43, 50]]

> dot [[1, 2], [3, 4]] [10, 20]
[50, 110]

> dot (2,2,3) x (3,2)
t1 (2,2,3):
[[[0, 1, 2],
  [3, 4, 5]],
 [[6, 7, 8],
  [9, 10, 11]]]
t2 (3,2):
[[0, 1],
 [2, 3],
 [4, 5]]
[[[10, 13],
  [28, 40]],
 [[46, 67],
  [64, 94]]]

> transpose [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]
[[1, 4],
 [2, 5],
 [3, 6]]

> transpose ~axes:[1, 2, 0] (2,3,4)
Original (2,3,4):
[[[0, 1, 2, 3],
  [4, 5, 6, 7],
  [8, 9, 10, 11]],
 [[12, 13, 14, 15],
  [16, 17, 18, 19],
  [20, 21, 22, 23]]]
[[[0, 12],
  [1, 13],
  [2, 14],
  [3, 15]],
 [[4, 16],
  [5, 17],
  [6, 18],
  [7, 19]],
 [[8, 20],
  [9, 21],
  [10, 22],
  [11, 23]]]

> transpose [1.0, 2.0, 3.0]
[1, 2, 3]

> transpose 42.0
42

> matmul [[1.0..3.0], [4.0..6.0]] [[7.0, 8.0], [9.0, 10.0], [11.0, 12.0]]
[[58, 64],
 [139, 154]]

> matmul (2,3) (2,3)
matmul: incompatible shapes for matrix multiplication ([2; 3] vs [2; 3] -> inner dimensions 3 vs 2 mismatch)

> convolve [1., 2., 3., 4.] [1., 1.]
[1, 3, 5, 7, 4]

> array_equal [1.0, 2.0, 3.0] [1.0, 2.0, 3.0]
true

> array_equal [1.0, 2.0, 3.0] [1.0, 2.0, 4.0]
false

> array_equal [1.0, 2.0, 3.0] [[1.0, 2.0, 3.0]]
false

> map (fun x -> x * 10) [1, 2, 3]
[10, 20, 30]

> iter (summing ref) [1., 2., 3.]
Sum computed via iter: 6.000000

> fold (+) 0 [1, 2, 3, 4, 5, 6]
Fold sum: 21

> where [1,0,1] [10,20,30] [40,50,60]
[10, 50, 30]

> where [[1],[0]] [10,20] [[100,200],[300,400]]
Condition (2,1):
[[1],
 [0]]
T1 (2,):
[10, 20]
T2 (2,2):
[[100, 200],
 [300, 400]]
[[10, 20],
 [300, 400]]

> div [1.0] [0.0]
inf

> create float32 [2, 2] [1.0, 2.0, 3.0]
create: data size (3) does not match shape size (4)

> add (empty) (empty)
[]

